// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bloaty.proto

#ifndef PROTOBUF_INCLUDED_bloaty_2eproto
#define PROTOBUF_INCLUDED_bloaty_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bloaty_2eproto 

namespace protobuf_bloaty_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bloaty_2eproto
namespace bloaty {
class CustomDataSource;
class CustomDataSourceDefaultTypeInternal;
extern CustomDataSourceDefaultTypeInternal _CustomDataSource_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Regex;
class RegexDefaultTypeInternal;
extern RegexDefaultTypeInternal _Regex_default_instance_;
}  // namespace bloaty
namespace google {
namespace protobuf {
template<> ::bloaty::CustomDataSource* Arena::CreateMaybeMessage<::bloaty::CustomDataSource>(Arena*);
template<> ::bloaty::Options* Arena::CreateMaybeMessage<::bloaty::Options>(Arena*);
template<> ::bloaty::Regex* Arena::CreateMaybeMessage<::bloaty::Regex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bloaty {

enum Options_Demangle {
  Options_Demangle_DEMANGLE_SHORT = 0,
  Options_Demangle_DEMANGLE_FULL = 1,
  Options_Demangle_DEMANGLE_NONE = 2
};
bool Options_Demangle_IsValid(int value);
const Options_Demangle Options_Demangle_Demangle_MIN = Options_Demangle_DEMANGLE_SHORT;
const Options_Demangle Options_Demangle_Demangle_MAX = Options_Demangle_DEMANGLE_NONE;
const int Options_Demangle_Demangle_ARRAYSIZE = Options_Demangle_Demangle_MAX + 1;

const ::google::protobuf::EnumDescriptor* Options_Demangle_descriptor();
inline const ::std::string& Options_Demangle_Name(Options_Demangle value) {
  return ::google::protobuf::internal::NameOfEnum(
    Options_Demangle_descriptor(), value);
}
inline bool Options_Demangle_Parse(
    const ::std::string& name, Options_Demangle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Options_Demangle>(
    Options_Demangle_descriptor(), name, value);
}
enum Options_SortBy {
  Options_SortBy_SORTBY_BOTH = 0,
  Options_SortBy_SORTBY_VMSIZE = 1,
  Options_SortBy_SORTBY_FILESIZE = 2
};
bool Options_SortBy_IsValid(int value);
const Options_SortBy Options_SortBy_SortBy_MIN = Options_SortBy_SORTBY_BOTH;
const Options_SortBy Options_SortBy_SortBy_MAX = Options_SortBy_SORTBY_FILESIZE;
const int Options_SortBy_SortBy_ARRAYSIZE = Options_SortBy_SortBy_MAX + 1;

const ::google::protobuf::EnumDescriptor* Options_SortBy_descriptor();
inline const ::std::string& Options_SortBy_Name(Options_SortBy value) {
  return ::google::protobuf::internal::NameOfEnum(
    Options_SortBy_descriptor(), value);
}
inline bool Options_SortBy_Parse(
    const ::std::string& name, Options_SortBy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Options_SortBy>(
    Options_SortBy_descriptor(), name, value);
}
// ===================================================================

class Options : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bloaty.Options) */ {
 public:
  Options();
  virtual ~Options();

  Options(const Options& from);

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(Options&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Options* other);
  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return CreateMaybeMessage<Options>(NULL);
  }

  Options* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Options_Demangle Demangle;
  static const Demangle DEMANGLE_SHORT =
    Options_Demangle_DEMANGLE_SHORT;
  static const Demangle DEMANGLE_FULL =
    Options_Demangle_DEMANGLE_FULL;
  static const Demangle DEMANGLE_NONE =
    Options_Demangle_DEMANGLE_NONE;
  static inline bool Demangle_IsValid(int value) {
    return Options_Demangle_IsValid(value);
  }
  static const Demangle Demangle_MIN =
    Options_Demangle_Demangle_MIN;
  static const Demangle Demangle_MAX =
    Options_Demangle_Demangle_MAX;
  static const int Demangle_ARRAYSIZE =
    Options_Demangle_Demangle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Demangle_descriptor() {
    return Options_Demangle_descriptor();
  }
  static inline const ::std::string& Demangle_Name(Demangle value) {
    return Options_Demangle_Name(value);
  }
  static inline bool Demangle_Parse(const ::std::string& name,
      Demangle* value) {
    return Options_Demangle_Parse(name, value);
  }

  typedef Options_SortBy SortBy;
  static const SortBy SORTBY_BOTH =
    Options_SortBy_SORTBY_BOTH;
  static const SortBy SORTBY_VMSIZE =
    Options_SortBy_SORTBY_VMSIZE;
  static const SortBy SORTBY_FILESIZE =
    Options_SortBy_SORTBY_FILESIZE;
  static inline bool SortBy_IsValid(int value) {
    return Options_SortBy_IsValid(value);
  }
  static const SortBy SortBy_MIN =
    Options_SortBy_SortBy_MIN;
  static const SortBy SortBy_MAX =
    Options_SortBy_SortBy_MAX;
  static const int SortBy_ARRAYSIZE =
    Options_SortBy_SortBy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SortBy_descriptor() {
    return Options_SortBy_descriptor();
  }
  static inline const ::std::string& SortBy_Name(SortBy value) {
    return Options_SortBy_Name(value);
  }
  static inline bool SortBy_Parse(const ::std::string& name,
      SortBy* value) {
    return Options_SortBy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string filename = 1;
  int filename_size() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename(int index) const;
  ::std::string* mutable_filename(int index);
  void set_filename(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_filename(int index, ::std::string&& value);
  #endif
  void set_filename(int index, const char* value);
  void set_filename(int index, const char* value, size_t size);
  ::std::string* add_filename();
  void add_filename(const ::std::string& value);
  #if LANG_CXX11
  void add_filename(::std::string&& value);
  #endif
  void add_filename(const char* value);
  void add_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filename();

  // repeated string base_filename = 2;
  int base_filename_size() const;
  void clear_base_filename();
  static const int kBaseFilenameFieldNumber = 2;
  const ::std::string& base_filename(int index) const;
  ::std::string* mutable_base_filename(int index);
  void set_base_filename(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_base_filename(int index, ::std::string&& value);
  #endif
  void set_base_filename(int index, const char* value);
  void set_base_filename(int index, const char* value, size_t size);
  ::std::string* add_base_filename();
  void add_base_filename(const ::std::string& value);
  #if LANG_CXX11
  void add_base_filename(::std::string&& value);
  #endif
  void add_base_filename(const char* value);
  void add_base_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& base_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_base_filename();

  // repeated string data_source = 3;
  int data_source_size() const;
  void clear_data_source();
  static const int kDataSourceFieldNumber = 3;
  const ::std::string& data_source(int index) const;
  ::std::string* mutable_data_source(int index);
  void set_data_source(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data_source(int index, ::std::string&& value);
  #endif
  void set_data_source(int index, const char* value);
  void set_data_source(int index, const char* value, size_t size);
  ::std::string* add_data_source();
  void add_data_source(const ::std::string& value);
  #if LANG_CXX11
  void add_data_source(::std::string&& value);
  #endif
  void add_data_source(const char* value);
  void add_data_source(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data_source() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data_source();

  // repeated .bloaty.CustomDataSource custom_data_source = 8;
  int custom_data_source_size() const;
  void clear_custom_data_source();
  static const int kCustomDataSourceFieldNumber = 8;
  ::bloaty::CustomDataSource* mutable_custom_data_source(int index);
  ::google::protobuf::RepeatedPtrField< ::bloaty::CustomDataSource >*
      mutable_custom_data_source();
  const ::bloaty::CustomDataSource& custom_data_source(int index) const;
  ::bloaty::CustomDataSource* add_custom_data_source();
  const ::google::protobuf::RepeatedPtrField< ::bloaty::CustomDataSource >&
      custom_data_source() const;

  // repeated string debug_filename = 10;
  int debug_filename_size() const;
  void clear_debug_filename();
  static const int kDebugFilenameFieldNumber = 10;
  const ::std::string& debug_filename(int index) const;
  ::std::string* mutable_debug_filename(int index);
  void set_debug_filename(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_debug_filename(int index, ::std::string&& value);
  #endif
  void set_debug_filename(int index, const char* value);
  void set_debug_filename(int index, const char* value, size_t size);
  ::std::string* add_debug_filename();
  void add_debug_filename(const ::std::string& value);
  #if LANG_CXX11
  void add_debug_filename(::std::string&& value);
  #endif
  void add_debug_filename(const char* value);
  void add_debug_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& debug_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_debug_filename();

  // optional string disassemble_function = 9;
  bool has_disassemble_function() const;
  void clear_disassemble_function();
  static const int kDisassembleFunctionFieldNumber = 9;
  const ::std::string& disassemble_function() const;
  void set_disassemble_function(const ::std::string& value);
  #if LANG_CXX11
  void set_disassemble_function(::std::string&& value);
  #endif
  void set_disassemble_function(const char* value);
  void set_disassemble_function(const char* value, size_t size);
  ::std::string* mutable_disassemble_function();
  ::std::string* release_disassemble_function();
  void set_allocated_disassemble_function(::std::string* disassemble_function);

  // optional string source_filter = 13;
  bool has_source_filter() const;
  void clear_source_filter();
  static const int kSourceFilterFieldNumber = 13;
  const ::std::string& source_filter() const;
  void set_source_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_source_filter(::std::string&& value);
  #endif
  void set_source_filter(const char* value);
  void set_source_filter(const char* value, size_t size);
  ::std::string* mutable_source_filter();
  ::std::string* release_source_filter();
  void set_allocated_source_filter(::std::string* source_filter);

  // optional .bloaty.Options.Demangle demangle = 5 [default = DEMANGLE_SHORT];
  bool has_demangle() const;
  void clear_demangle();
  static const int kDemangleFieldNumber = 5;
  ::bloaty::Options_Demangle demangle() const;
  void set_demangle(::bloaty::Options_Demangle value);

  // optional .bloaty.Options.SortBy sort_by = 6 [default = SORTBY_BOTH];
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 6;
  ::bloaty::Options_SortBy sort_by() const;
  void set_sort_by(::bloaty::Options_SortBy value);

  // optional uint64 debug_vmaddr = 11;
  bool has_debug_vmaddr() const;
  void clear_debug_vmaddr();
  static const int kDebugVmaddrFieldNumber = 11;
  ::google::protobuf::uint64 debug_vmaddr() const;
  void set_debug_vmaddr(::google::protobuf::uint64 value);

  // optional uint64 debug_fileoff = 12;
  bool has_debug_fileoff() const;
  void clear_debug_fileoff();
  static const int kDebugFileoffFieldNumber = 12;
  ::google::protobuf::uint64 debug_fileoff() const;
  void set_debug_fileoff(::google::protobuf::uint64 value);

  // optional int32 verbose_level = 7;
  bool has_verbose_level() const;
  void clear_verbose_level();
  static const int kVerboseLevelFieldNumber = 7;
  ::google::protobuf::int32 verbose_level() const;
  void set_verbose_level(::google::protobuf::int32 value);

  // optional int64 max_rows_per_level = 4 [default = 20];
  bool has_max_rows_per_level() const;
  void clear_max_rows_per_level();
  static const int kMaxRowsPerLevelFieldNumber = 4;
  ::google::protobuf::int64 max_rows_per_level() const;
  void set_max_rows_per_level(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:bloaty.Options)
 private:
  void set_has_max_rows_per_level();
  void clear_has_max_rows_per_level();
  void set_has_demangle();
  void clear_has_demangle();
  void set_has_sort_by();
  void clear_has_sort_by();
  void set_has_verbose_level();
  void clear_has_verbose_level();
  void set_has_debug_vmaddr();
  void clear_has_debug_vmaddr();
  void set_has_debug_fileoff();
  void clear_has_debug_fileoff();
  void set_has_disassemble_function();
  void clear_has_disassemble_function();
  void set_has_source_filter();
  void clear_has_source_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> base_filename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_source_;
  ::google::protobuf::RepeatedPtrField< ::bloaty::CustomDataSource > custom_data_source_;
  ::google::protobuf::RepeatedPtrField< ::std::string> debug_filename_;
  ::google::protobuf::internal::ArenaStringPtr disassemble_function_;
  ::google::protobuf::internal::ArenaStringPtr source_filter_;
  int demangle_;
  int sort_by_;
  ::google::protobuf::uint64 debug_vmaddr_;
  ::google::protobuf::uint64 debug_fileoff_;
  ::google::protobuf::int32 verbose_level_;
  ::google::protobuf::int64 max_rows_per_level_;
  friend struct ::protobuf_bloaty_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomDataSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bloaty.CustomDataSource) */ {
 public:
  CustomDataSource();
  virtual ~CustomDataSource();

  CustomDataSource(const CustomDataSource& from);

  inline CustomDataSource& operator=(const CustomDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomDataSource(CustomDataSource&& from) noexcept
    : CustomDataSource() {
    *this = ::std::move(from);
  }

  inline CustomDataSource& operator=(CustomDataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomDataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomDataSource* internal_default_instance() {
    return reinterpret_cast<const CustomDataSource*>(
               &_CustomDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CustomDataSource* other);
  friend void swap(CustomDataSource& a, CustomDataSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomDataSource* New() const final {
    return CreateMaybeMessage<CustomDataSource>(NULL);
  }

  CustomDataSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomDataSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomDataSource& from);
  void MergeFrom(const CustomDataSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomDataSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bloaty.Regex rewrite = 3;
  int rewrite_size() const;
  void clear_rewrite();
  static const int kRewriteFieldNumber = 3;
  ::bloaty::Regex* mutable_rewrite(int index);
  ::google::protobuf::RepeatedPtrField< ::bloaty::Regex >*
      mutable_rewrite();
  const ::bloaty::Regex& rewrite(int index) const;
  ::bloaty::Regex* add_rewrite();
  const ::google::protobuf::RepeatedPtrField< ::bloaty::Regex >&
      rewrite() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string base_data_source = 2;
  bool has_base_data_source() const;
  void clear_base_data_source();
  static const int kBaseDataSourceFieldNumber = 2;
  const ::std::string& base_data_source() const;
  void set_base_data_source(const ::std::string& value);
  #if LANG_CXX11
  void set_base_data_source(::std::string&& value);
  #endif
  void set_base_data_source(const char* value);
  void set_base_data_source(const char* value, size_t size);
  ::std::string* mutable_base_data_source();
  ::std::string* release_base_data_source();
  void set_allocated_base_data_source(::std::string* base_data_source);

  // @@protoc_insertion_point(class_scope:bloaty.CustomDataSource)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_base_data_source();
  void clear_has_base_data_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bloaty::Regex > rewrite_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr base_data_source_;
  friend struct ::protobuf_bloaty_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Regex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bloaty.Regex) */ {
 public:
  Regex();
  virtual ~Regex();

  Regex(const Regex& from);

  inline Regex& operator=(const Regex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Regex(Regex&& from) noexcept
    : Regex() {
    *this = ::std::move(from);
  }

  inline Regex& operator=(Regex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Regex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Regex* internal_default_instance() {
    return reinterpret_cast<const Regex*>(
               &_Regex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Regex* other);
  friend void swap(Regex& a, Regex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Regex* New() const final {
    return CreateMaybeMessage<Regex>(NULL);
  }

  Regex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Regex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Regex& from);
  void MergeFrom(const Regex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Regex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pattern = 1;
  bool has_pattern() const;
  void clear_pattern();
  static const int kPatternFieldNumber = 1;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_pattern(::std::string&& value);
  #endif
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // optional string replacement = 2;
  bool has_replacement() const;
  void clear_replacement();
  static const int kReplacementFieldNumber = 2;
  const ::std::string& replacement() const;
  void set_replacement(const ::std::string& value);
  #if LANG_CXX11
  void set_replacement(::std::string&& value);
  #endif
  void set_replacement(const char* value);
  void set_replacement(const char* value, size_t size);
  ::std::string* mutable_replacement();
  ::std::string* release_replacement();
  void set_allocated_replacement(::std::string* replacement);

  // @@protoc_insertion_point(class_scope:bloaty.Regex)
 private:
  void set_has_pattern();
  void clear_has_pattern();
  void set_has_replacement();
  void clear_has_replacement();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  ::google::protobuf::internal::ArenaStringPtr replacement_;
  friend struct ::protobuf_bloaty_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Options

// repeated string filename = 1;
inline int Options::filename_size() const {
  return filename_.size();
}
inline void Options::clear_filename() {
  filename_.Clear();
}
inline const ::std::string& Options::filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.filename)
  return filename_.Get(index);
}
inline ::std::string* Options::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.filename)
  return filename_.Mutable(index);
}
inline void Options::set_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.filename)
  filename_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Options::set_filename(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.filename)
  filename_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Options::set_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.filename)
}
inline void Options::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.filename)
}
inline ::std::string* Options::add_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.filename)
  return filename_.Add();
}
inline void Options::add_filename(const ::std::string& value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.filename)
}
#if LANG_CXX11
inline void Options::add_filename(::std::string&& value) {
  filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.filename)
}
#endif
inline void Options::add_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.filename)
}
inline void Options::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Options::filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.filename)
  return filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Options::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.filename)
  return &filename_;
}

// repeated string base_filename = 2;
inline int Options::base_filename_size() const {
  return base_filename_.size();
}
inline void Options::clear_base_filename() {
  base_filename_.Clear();
}
inline const ::std::string& Options::base_filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.base_filename)
  return base_filename_.Get(index);
}
inline ::std::string* Options::mutable_base_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.base_filename)
  return base_filename_.Mutable(index);
}
inline void Options::set_base_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.base_filename)
  base_filename_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Options::set_base_filename(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.base_filename)
  base_filename_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Options::set_base_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  base_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.base_filename)
}
inline void Options::set_base_filename(int index, const char* value, size_t size) {
  base_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.base_filename)
}
inline ::std::string* Options::add_base_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.base_filename)
  return base_filename_.Add();
}
inline void Options::add_base_filename(const ::std::string& value) {
  base_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.base_filename)
}
#if LANG_CXX11
inline void Options::add_base_filename(::std::string&& value) {
  base_filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.base_filename)
}
#endif
inline void Options::add_base_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  base_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.base_filename)
}
inline void Options::add_base_filename(const char* value, size_t size) {
  base_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.base_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Options::base_filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.base_filename)
  return base_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Options::mutable_base_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.base_filename)
  return &base_filename_;
}

// repeated string debug_filename = 10;
inline int Options::debug_filename_size() const {
  return debug_filename_.size();
}
inline void Options::clear_debug_filename() {
  debug_filename_.Clear();
}
inline const ::std::string& Options::debug_filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_filename)
  return debug_filename_.Get(index);
}
inline ::std::string* Options::mutable_debug_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.debug_filename)
  return debug_filename_.Mutable(index);
}
inline void Options::set_debug_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_filename)
  debug_filename_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Options::set_debug_filename(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_filename)
  debug_filename_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Options::set_debug_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  debug_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.debug_filename)
}
inline void Options::set_debug_filename(int index, const char* value, size_t size) {
  debug_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.debug_filename)
}
inline ::std::string* Options::add_debug_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.debug_filename)
  return debug_filename_.Add();
}
inline void Options::add_debug_filename(const ::std::string& value) {
  debug_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.debug_filename)
}
#if LANG_CXX11
inline void Options::add_debug_filename(::std::string&& value) {
  debug_filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.debug_filename)
}
#endif
inline void Options::add_debug_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  debug_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.debug_filename)
}
inline void Options::add_debug_filename(const char* value, size_t size) {
  debug_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.debug_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Options::debug_filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.debug_filename)
  return debug_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Options::mutable_debug_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.debug_filename)
  return &debug_filename_;
}

// repeated string data_source = 3;
inline int Options::data_source_size() const {
  return data_source_.size();
}
inline void Options::clear_data_source() {
  data_source_.Clear();
}
inline const ::std::string& Options::data_source(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.data_source)
  return data_source_.Get(index);
}
inline ::std::string* Options::mutable_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.data_source)
  return data_source_.Mutable(index);
}
inline void Options::set_data_source(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.data_source)
  data_source_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Options::set_data_source(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.data_source)
  data_source_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Options::set_data_source(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_source_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.data_source)
}
inline void Options::set_data_source(int index, const char* value, size_t size) {
  data_source_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.data_source)
}
inline ::std::string* Options::add_data_source() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.data_source)
  return data_source_.Add();
}
inline void Options::add_data_source(const ::std::string& value) {
  data_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.data_source)
}
#if LANG_CXX11
inline void Options::add_data_source(::std::string&& value) {
  data_source_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.data_source)
}
#endif
inline void Options::add_data_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.data_source)
}
inline void Options::add_data_source(const char* value, size_t size) {
  data_source_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.data_source)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Options::data_source() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.data_source)
  return data_source_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Options::mutable_data_source() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.data_source)
  return &data_source_;
}

// optional int64 max_rows_per_level = 4 [default = 20];
inline bool Options::has_max_rows_per_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Options::set_has_max_rows_per_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Options::clear_has_max_rows_per_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Options::clear_max_rows_per_level() {
  max_rows_per_level_ = GOOGLE_LONGLONG(20);
  clear_has_max_rows_per_level();
}
inline ::google::protobuf::int64 Options::max_rows_per_level() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.max_rows_per_level)
  return max_rows_per_level_;
}
inline void Options::set_max_rows_per_level(::google::protobuf::int64 value) {
  set_has_max_rows_per_level();
  max_rows_per_level_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.max_rows_per_level)
}

// optional .bloaty.Options.Demangle demangle = 5 [default = DEMANGLE_SHORT];
inline bool Options::has_demangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Options::set_has_demangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Options::clear_has_demangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Options::clear_demangle() {
  demangle_ = 0;
  clear_has_demangle();
}
inline ::bloaty::Options_Demangle Options::demangle() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.demangle)
  return static_cast< ::bloaty::Options_Demangle >(demangle_);
}
inline void Options::set_demangle(::bloaty::Options_Demangle value) {
  assert(::bloaty::Options_Demangle_IsValid(value));
  set_has_demangle();
  demangle_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.demangle)
}

// optional .bloaty.Options.SortBy sort_by = 6 [default = SORTBY_BOTH];
inline bool Options::has_sort_by() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Options::set_has_sort_by() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Options::clear_has_sort_by() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Options::clear_sort_by() {
  sort_by_ = 0;
  clear_has_sort_by();
}
inline ::bloaty::Options_SortBy Options::sort_by() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.sort_by)
  return static_cast< ::bloaty::Options_SortBy >(sort_by_);
}
inline void Options::set_sort_by(::bloaty::Options_SortBy value) {
  assert(::bloaty::Options_SortBy_IsValid(value));
  set_has_sort_by();
  sort_by_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.sort_by)
}

// optional int32 verbose_level = 7;
inline bool Options::has_verbose_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Options::set_has_verbose_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Options::clear_has_verbose_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Options::clear_verbose_level() {
  verbose_level_ = 0;
  clear_has_verbose_level();
}
inline ::google::protobuf::int32 Options::verbose_level() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.verbose_level)
  return verbose_level_;
}
inline void Options::set_verbose_level(::google::protobuf::int32 value) {
  set_has_verbose_level();
  verbose_level_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.verbose_level)
}

// optional uint64 debug_vmaddr = 11;
inline bool Options::has_debug_vmaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Options::set_has_debug_vmaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Options::clear_has_debug_vmaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Options::clear_debug_vmaddr() {
  debug_vmaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_debug_vmaddr();
}
inline ::google::protobuf::uint64 Options::debug_vmaddr() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_vmaddr)
  return debug_vmaddr_;
}
inline void Options::set_debug_vmaddr(::google::protobuf::uint64 value) {
  set_has_debug_vmaddr();
  debug_vmaddr_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_vmaddr)
}

// optional uint64 debug_fileoff = 12;
inline bool Options::has_debug_fileoff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Options::set_has_debug_fileoff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Options::clear_has_debug_fileoff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Options::clear_debug_fileoff() {
  debug_fileoff_ = GOOGLE_ULONGLONG(0);
  clear_has_debug_fileoff();
}
inline ::google::protobuf::uint64 Options::debug_fileoff() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_fileoff)
  return debug_fileoff_;
}
inline void Options::set_debug_fileoff(::google::protobuf::uint64 value) {
  set_has_debug_fileoff();
  debug_fileoff_ = value;
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_fileoff)
}

// repeated .bloaty.CustomDataSource custom_data_source = 8;
inline int Options::custom_data_source_size() const {
  return custom_data_source_.size();
}
inline void Options::clear_custom_data_source() {
  custom_data_source_.Clear();
}
inline ::bloaty::CustomDataSource* Options::mutable_custom_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.custom_data_source)
  return custom_data_source_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bloaty::CustomDataSource >*
Options::mutable_custom_data_source() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.custom_data_source)
  return &custom_data_source_;
}
inline const ::bloaty::CustomDataSource& Options::custom_data_source(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.custom_data_source)
  return custom_data_source_.Get(index);
}
inline ::bloaty::CustomDataSource* Options::add_custom_data_source() {
  // @@protoc_insertion_point(field_add:bloaty.Options.custom_data_source)
  return custom_data_source_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bloaty::CustomDataSource >&
Options::custom_data_source() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.custom_data_source)
  return custom_data_source_;
}

// optional string disassemble_function = 9;
inline bool Options::has_disassemble_function() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Options::set_has_disassemble_function() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Options::clear_has_disassemble_function() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Options::clear_disassemble_function() {
  disassemble_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disassemble_function();
}
inline const ::std::string& Options::disassemble_function() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.disassemble_function)
  return disassemble_function_.GetNoArena();
}
inline void Options::set_disassemble_function(const ::std::string& value) {
  set_has_disassemble_function();
  disassemble_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.Options.disassemble_function)
}
#if LANG_CXX11
inline void Options::set_disassemble_function(::std::string&& value) {
  set_has_disassemble_function();
  disassemble_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Options.disassemble_function)
}
#endif
inline void Options::set_disassemble_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_disassemble_function();
  disassemble_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Options.disassemble_function)
}
inline void Options::set_disassemble_function(const char* value, size_t size) {
  set_has_disassemble_function();
  disassemble_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.disassemble_function)
}
inline ::std::string* Options::mutable_disassemble_function() {
  set_has_disassemble_function();
  // @@protoc_insertion_point(field_mutable:bloaty.Options.disassemble_function)
  return disassemble_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Options::release_disassemble_function() {
  // @@protoc_insertion_point(field_release:bloaty.Options.disassemble_function)
  if (!has_disassemble_function()) {
    return NULL;
  }
  clear_has_disassemble_function();
  return disassemble_function_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Options::set_allocated_disassemble_function(::std::string* disassemble_function) {
  if (disassemble_function != NULL) {
    set_has_disassemble_function();
  } else {
    clear_has_disassemble_function();
  }
  disassemble_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disassemble_function);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Options.disassemble_function)
}

// optional string source_filter = 13;
inline bool Options::has_source_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Options::set_has_source_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Options::clear_has_source_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Options::clear_source_filter() {
  source_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_filter();
}
inline const ::std::string& Options::source_filter() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.source_filter)
  return source_filter_.GetNoArena();
}
inline void Options::set_source_filter(const ::std::string& value) {
  set_has_source_filter();
  source_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.Options.source_filter)
}
#if LANG_CXX11
inline void Options::set_source_filter(::std::string&& value) {
  set_has_source_filter();
  source_filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Options.source_filter)
}
#endif
inline void Options::set_source_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_filter();
  source_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Options.source_filter)
}
inline void Options::set_source_filter(const char* value, size_t size) {
  set_has_source_filter();
  source_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.source_filter)
}
inline ::std::string* Options::mutable_source_filter() {
  set_has_source_filter();
  // @@protoc_insertion_point(field_mutable:bloaty.Options.source_filter)
  return source_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Options::release_source_filter() {
  // @@protoc_insertion_point(field_release:bloaty.Options.source_filter)
  if (!has_source_filter()) {
    return NULL;
  }
  clear_has_source_filter();
  return source_filter_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Options::set_allocated_source_filter(::std::string* source_filter) {
  if (source_filter != NULL) {
    set_has_source_filter();
  } else {
    clear_has_source_filter();
  }
  source_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_filter);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Options.source_filter)
}

// -------------------------------------------------------------------

// CustomDataSource

// optional string name = 1;
inline bool CustomDataSource::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomDataSource::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomDataSource::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomDataSource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CustomDataSource::name() const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.name)
  return name_.GetNoArena();
}
inline void CustomDataSource::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.CustomDataSource.name)
}
#if LANG_CXX11
inline void CustomDataSource::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.CustomDataSource.name)
}
#endif
inline void CustomDataSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.CustomDataSource.name)
}
inline void CustomDataSource::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.CustomDataSource.name)
}
inline ::std::string* CustomDataSource::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDataSource::release_name() {
  // @@protoc_insertion_point(field_release:bloaty.CustomDataSource.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDataSource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bloaty.CustomDataSource.name)
}

// optional string base_data_source = 2;
inline bool CustomDataSource::has_base_data_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomDataSource::set_has_base_data_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomDataSource::clear_has_base_data_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomDataSource::clear_base_data_source() {
  base_data_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_data_source();
}
inline const ::std::string& CustomDataSource::base_data_source() const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.base_data_source)
  return base_data_source_.GetNoArena();
}
inline void CustomDataSource::set_base_data_source(const ::std::string& value) {
  set_has_base_data_source();
  base_data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.CustomDataSource.base_data_source)
}
#if LANG_CXX11
inline void CustomDataSource::set_base_data_source(::std::string&& value) {
  set_has_base_data_source();
  base_data_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.CustomDataSource.base_data_source)
}
#endif
inline void CustomDataSource::set_base_data_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base_data_source();
  base_data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.CustomDataSource.base_data_source)
}
inline void CustomDataSource::set_base_data_source(const char* value, size_t size) {
  set_has_base_data_source();
  base_data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.CustomDataSource.base_data_source)
}
inline ::std::string* CustomDataSource::mutable_base_data_source() {
  set_has_base_data_source();
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.base_data_source)
  return base_data_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDataSource::release_base_data_source() {
  // @@protoc_insertion_point(field_release:bloaty.CustomDataSource.base_data_source)
  if (!has_base_data_source()) {
    return NULL;
  }
  clear_has_base_data_source();
  return base_data_source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDataSource::set_allocated_base_data_source(::std::string* base_data_source) {
  if (base_data_source != NULL) {
    set_has_base_data_source();
  } else {
    clear_has_base_data_source();
  }
  base_data_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_data_source);
  // @@protoc_insertion_point(field_set_allocated:bloaty.CustomDataSource.base_data_source)
}

// repeated .bloaty.Regex rewrite = 3;
inline int CustomDataSource::rewrite_size() const {
  return rewrite_.size();
}
inline void CustomDataSource::clear_rewrite() {
  rewrite_.Clear();
}
inline ::bloaty::Regex* CustomDataSource::mutable_rewrite(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.rewrite)
  return rewrite_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bloaty::Regex >*
CustomDataSource::mutable_rewrite() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.CustomDataSource.rewrite)
  return &rewrite_;
}
inline const ::bloaty::Regex& CustomDataSource::rewrite(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.rewrite)
  return rewrite_.Get(index);
}
inline ::bloaty::Regex* CustomDataSource::add_rewrite() {
  // @@protoc_insertion_point(field_add:bloaty.CustomDataSource.rewrite)
  return rewrite_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bloaty::Regex >&
CustomDataSource::rewrite() const {
  // @@protoc_insertion_point(field_list:bloaty.CustomDataSource.rewrite)
  return rewrite_;
}

// -------------------------------------------------------------------

// Regex

// optional string pattern = 1;
inline bool Regex::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Regex::set_has_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Regex::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Regex::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
inline const ::std::string& Regex::pattern() const {
  // @@protoc_insertion_point(field_get:bloaty.Regex.pattern)
  return pattern_.GetNoArena();
}
inline void Regex::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.Regex.pattern)
}
#if LANG_CXX11
inline void Regex::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Regex.pattern)
}
#endif
inline void Regex::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Regex.pattern)
}
inline void Regex::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Regex.pattern)
}
inline ::std::string* Regex::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:bloaty.Regex.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Regex::release_pattern() {
  // @@protoc_insertion_point(field_release:bloaty.Regex.pattern)
  if (!has_pattern()) {
    return NULL;
  }
  clear_has_pattern();
  return pattern_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Regex::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Regex.pattern)
}

// optional string replacement = 2;
inline bool Regex::has_replacement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Regex::set_has_replacement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Regex::clear_has_replacement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Regex::clear_replacement() {
  replacement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replacement();
}
inline const ::std::string& Regex::replacement() const {
  // @@protoc_insertion_point(field_get:bloaty.Regex.replacement)
  return replacement_.GetNoArena();
}
inline void Regex::set_replacement(const ::std::string& value) {
  set_has_replacement();
  replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bloaty.Regex.replacement)
}
#if LANG_CXX11
inline void Regex::set_replacement(::std::string&& value) {
  set_has_replacement();
  replacement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Regex.replacement)
}
#endif
inline void Regex::set_replacement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replacement();
  replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Regex.replacement)
}
inline void Regex::set_replacement(const char* value, size_t size) {
  set_has_replacement();
  replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Regex.replacement)
}
inline ::std::string* Regex::mutable_replacement() {
  set_has_replacement();
  // @@protoc_insertion_point(field_mutable:bloaty.Regex.replacement)
  return replacement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Regex::release_replacement() {
  // @@protoc_insertion_point(field_release:bloaty.Regex.replacement)
  if (!has_replacement()) {
    return NULL;
  }
  clear_has_replacement();
  return replacement_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Regex::set_allocated_replacement(::std::string* replacement) {
  if (replacement != NULL) {
    set_has_replacement();
  } else {
    clear_has_replacement();
  }
  replacement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replacement);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Regex.replacement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bloaty

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bloaty::Options_Demangle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bloaty::Options_Demangle>() {
  return ::bloaty::Options_Demangle_descriptor();
}
template <> struct is_proto_enum< ::bloaty::Options_SortBy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bloaty::Options_SortBy>() {
  return ::bloaty::Options_SortBy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bloaty_2eproto
